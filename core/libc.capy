
// in the future, you wouldn't call `malloc` directly, you'd use an Allocator abstraction

// allocates size bytes of memory. make sure to free() the pointer after your done.
malloc :: (size: usize) -> ^mut any extern;
// allocates len * size bytes, all the bits are set to 0
calloc :: (len: usize, size: usize) -> ^mut any extern;
// frees allocated memory
free :: (ptr: ^any) extern;
// copies len bytes from dst to src
memcpy :: (dst: ^any, src: ^any, len: usize) extern;

// prints a string to the screen, adds a newline at the end
puts :: (text: str) extern;
// prints a char to the screen
putchar :: (ch: char) extern;

// opens a file for either reading "r", writing "w", appending "a",
// open a file to update both reading and writing "r+",
// create an empty file for reading and writing "w+",
// or open a file for reading and appending "a+"
fopen :: (filename: str, mode: str) -> usize extern;
// closes a file
fclose :: (fp: usize) -> i32 extern;

// writes a char to a file
fputc :: (ch: char, fp: usize) -> i32 extern;
// writes a string to a file, doesn't add a newline at the end
fputs :: (text: str, fp: usize) -> i32 extern;

// read a char from a file
fgetc :: (fp: usize) -> char extern;
// read len char's from a file and store them in buf
fgets :: (buf: ^char, len: i32, fp: usize) -> str extern;

// tests the end-of-file indicator for the given file
feof :: (fp: usize) -> bool extern;

// exits the current program
exit :: (status: i32) extern;
