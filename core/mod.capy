
// this is all going to change.
// `pub` is going to be added
// after that, there will be a way to bypass it
version :: "alpha 0.1.1";

fmt :: import "fmt.capy";
libc :: import "libc.capy";
ptr :: import "ptr.capy";
math :: import "math.capy";
meta :: import "meta.capy";
strings :: import "strings.capy";

assert :: (condition: bool) {
    if !condition {
        println("assert failed!");
        libc.exit(1);
    }
}

print :: (text: str) {
    text := text as ^char;
    i := 0;
    loop {
        ch := ptr.read(text, i) as char;
        if ch == '\0' {
            break;
        }

        libc.putchar(ch);

        i = i + 1;
    }
}

println :: (text: str) {
    libc.puts(text);
}

len :: (slice: [] any) -> usize extern;

Any :: struct {
    ty: type,
    data: ^any,
};

println_any :: (val: Any) {
    print_any(val);
    libc.putchar('\n');
}

print_any :: (val: Any) {
    ty := val.ty;
    data := val.data;

    if meta.is_int(ty) {
        int_info := meta.get_int_info(ty);

        num := if int_info.bit_width == 8 {
            {data as ^i8}^ as i32
        } else if int_info.bit_width == 16 {
            {data as ^i16}^ as i32
        } else if int_info.bit_width == 32 {
            {data as ^i32}^ as i32
        } else if int_info.bit_width == 64 {
            {data as ^i64}^ as i32
        } else if int_info.bit_width == 128 {
            {data as ^i128}^ as i32
        } else {
            0
        };

        str := if int_info.signed {    
            fmt.i32_to_string(num)
        } else {
            fmt.u32_to_string(num as u32)
        };

        strings.print_string(^str);
        libc.free(str.buf);

    } else if meta.is_bool(ty) {
        if {data as ^bool}^ {
            print("true");
        } else {
            print("false");
        }
    } else if meta.is_string(ty) {
        print({data as ^str}^);
    } else if meta.is_char(ty) {
        libc.putchar({data as ^char}^);
    } else if meta.is_array(ty) {
        info := meta.get_array_info(ty);
        elem_stride := meta.stride_of(info.ty);

        print("{ ");

        idx := 0;
        while idx < info.len {
            addr := ptr.const_offset(data, elem_stride * idx);
            
            print_any(Any { ty: info.ty, data: addr });

            if idx < info.len - 1 {
                print(", ");
            }
            
            idx = idx + 1;
        }

        print(" }");
    } else if meta.is_slice(ty) {
        info := meta.get_slice_info(ty);
        elem_stride := meta.stride_of(info.ty);

        slice := data as ^[] any;
        len := slice.len;

        print("{ ");

        idx := 0;
        while idx < len {
            addr := ptr.const_offset(slice.ptr, elem_stride * idx);

            print_any(Any { ty: info.ty, data: addr });

            if idx < len - 1 {
                print(", ");
            }

            idx = idx + 1;
        }

        print(" }");
    } else if meta.is_pointer(ty) {
        print("^");

        info := meta.get_pointer_info(ty);

        print_any(Any { ty: info.ty, data: {data as ^^any}^});
    } else if meta.is_distinct(ty) {
        info := meta.get_distinct_info(ty);

        print_any(Any { ty: info.ty, data: data });
    } else if meta.is_meta_type(ty) {
        print("{type}");
    } else if meta.is_any(ty) {
        print("{any}");
    } else if meta.is_file(ty) {
        print("{import}");
    } else if meta.is_function(ty) {
        print("{function}");
    } else if meta.is_struct(ty) {
        print("{struct}");
    } else if meta.is_void(ty) {
        print("void");
    }
}
