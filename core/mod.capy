
// this is all going to change.
// `pub` is going to be added
// after that, there will be a way to bypass it
version :: "alpha 0.3.0";

fmt :: import "fmt.capy";
libc :: import "libc.capy";
ptr :: import "ptr.capy";
math :: import "math.capy";
meta :: import "meta.capy";
strings :: import "strings.capy";

assert :: (condition: bool) {
    if !condition {
        println("assertion failed!");
        libc.exit(1);
    }
}

len :: (slice: [] any) -> usize extern;

Any :: struct {
    ty: type,
    data: ^any,
};

println :: (val: Any) {
    print(val);
    libc.putchar('\n');
}

_print_str :: (text: str) {
    text := text as ^char;

    i := 0;
    loop {
        ch := ptr.read(text, i) as char;
        if ch == '\0' {
            break;
        }

        libc.putchar(ch);

        i = i + 1;
    }
}

print :: (val: Any) {
    ty := val.ty;
    data := val.data;

    if meta.is_int(ty) {
        int_info := meta.get_int_info(ty);

        str := if int_info.signed {
            num := if int_info.bit_width == 8 {
                {data as ^i8}^ as i64
            } else if int_info.bit_width == 16 {
                {data as ^i16}^ as i64
            } else if int_info.bit_width == 32 {
                {data as ^i32}^ as i64
            } else if int_info.bit_width == 64 {
                {data as ^i64}^ as i64
            } else if int_info.bit_width == 128 {
                {data as ^i128}^ as i64
            } else {
                0
            };

            fmt.i64_to_string(num)
        } else {
            num := if int_info.bit_width == 8 {
                {data as ^u8}^ as u64
            } else if int_info.bit_width == 16 {
                {data as ^u16}^ as u64
            } else if int_info.bit_width == 32 {
                {data as ^u32}^ as u64
            } else if int_info.bit_width == 64 {
                {data as ^u64}^ as u64
            } else if int_info.bit_width == 128 {
                {data as ^u128}^ as u64
            } else {
                0
            };

            fmt.u64_to_string(num)
        };

        strings.print_string(^str);
        libc.free(str.buf);
    } else if meta.is_float(ty) {
        float_info := meta.get_float_info(ty);
        
        num := if float_info.bit_width == 32 {
            {data as ^f32}^ as f64
        } else if float_info.bit_width == 64 {
            {data as ^f64}^ as f64
        } else {
            0
        };

        str := fmt.f64_to_string(num);

        strings.print_string(^str);
        libc.free(str.buf);
    } else if meta.is_bool(ty) {
        if {data as ^bool}^ {
            _print_str("true");
        } else {
            _print_str("false");
        }
    } else if meta.is_string(ty) {
        _print_str(data as ^str^);
    } else if meta.is_char(ty) {
        libc.putchar({data as ^char}^);
    } else if meta.is_array(ty) {
        info := meta.get_array_info(ty);
        elem_stride := meta.stride_of(info.ty);

        _print_str("{ ");

        idx := 0;
        while idx < info.len {
            addr := ptr.const_offset(data, elem_stride * idx);
            
            print(Any { ty: info.ty, data: addr });

            if idx < info.len - 1 {
                _print_str(", ");
            }
            
            idx = idx + 1;
        }

        _print_str(" }");
    } else if meta.is_slice(ty) {
        info := meta.get_slice_info(ty);
        elem_stride := meta.stride_of(info.ty);

        slice := data as ^[] any;
        len := slice.len;

        _print_str("{ ");

        idx := 0;
        while idx < len {
            addr := ptr.const_offset(slice.ptr, elem_stride * idx);

            print(Any { ty: info.ty, data: addr });

            if idx < len - 1 {
                _print_str(", ");
            }

            idx = idx + 1;
        }

        _print_str(" }");
    } else if meta.is_pointer(ty) {
        _print_str("^");

        info := meta.get_pointer_info(ty);

        print(Any { ty: info.ty, data: {data as ^^any}^});
    } else if meta.is_distinct(ty) {
        info := meta.get_distinct_info(ty);

        print(Any { ty: info.ty, data: data });
    } else if meta.is_meta_type(ty) {
        print_type_info(data as ^type^);
    } else if meta.is_any(ty) {
        _print_str("{any}");
    } else if meta.is_file(ty) {
        _print_str("{import}");
    } else if meta.is_function(ty) {
        _print_str("{function}");
    } else if meta.is_struct(ty) {
        if ty == Any {
            data := data as ^Any;

            print(data^);

            return;
        }

        info := meta.get_struct_info(ty);

        _print_str("{ ");

        idx := 0;
        while idx < info.members.len {
            member := info.members[idx];

            _print_str(member.name);
            _print_str(" = ");

            print(Any {
                ty: member.ty,
                data: ptr.const_offset(data, member.offset),
            });

            if idx < info.members.len - 1 {
                _print_str(", ");
            }
            idx = idx + 1;
        }

        _print_str(" }");
    } else if meta.is_void(ty) {
        _print_str("{}");
    }
}

print_type_info :: (ty: type) {
    _print_str :: (text: str) {
        text := text as ^char;

        i := 0;
        loop {
            ch := ptr.read(text, i) as char;
            if ch == '\0' {
                break;
            }

            libc.putchar(ch);

            i = i + 1;
        }
    };

    
    if meta.is_int(ty) {
        info := meta.get_int_info(ty);

        if info.signed {
            libc.putchar('i');
        } else {
            libc.putchar('u');
        }

        str := fmt.i64_to_string(info.bit_width);
        defer libc.free(str.buf);

        strings.print_string(^str);
    } else if meta.is_float(ty) {
        info := meta.get_float_info(ty);

        libc.putchar('f');

        str := fmt.i64_to_string(info.bit_width);
        defer libc.free(str.buf);

        strings.print_string(^str);
    } else if meta.is_bool(ty) {
        _print_str("bool");
    } else if meta.is_string(ty) {
        _print_str("str");
    } else if meta.is_char(ty) {
        _print_str("char");
    } else if meta.is_array(ty) {
        info := meta.get_array_info(ty);

        libc.putchar('[');

        str := fmt.i64_to_string(info.len as i64);
        defer libc.free(str.buf);
        strings.print_string(^str);

        libc.putchar(']');
        libc.putchar(' ');

        print_type_info(info.ty);
    } else if meta.is_slice(ty) {
        info := meta.get_slice_info(ty);

        _print_str("[] ");
        print_type_info(info.ty);
    } else if meta.is_pointer(ty) {
        info := meta.get_pointer_info(ty);

        libc.putchar('^');
        print_type_info(info.ty);
    } else if meta.is_distinct(ty) {
        info := meta.get_distinct_info(ty);

        _print_str("distinct ");
        print_type_info(info.ty);
    } else if meta.is_meta_type(ty) {
        _print_str("type");
    } else if meta.is_any(ty) {
        _print_str("any");
    } else if meta.is_file(ty) {
        _print_str("{import}");
    } else if meta.is_function(ty) {
        _print_str("{function}");
    } else if meta.is_struct(ty) {
        info := meta.get_struct_info(ty);

        _print_str("struct { ");

        idx := 0;
        while idx < info.members.len {
            member := info.members[idx];

            _print_str(member.name);
            _print_str(": ");

            print_type_info(member.ty);

            if idx < info.members.len - 1 {
                _print_str(", ");
            }
            idx = idx + 1;
        }

        _print_str(" }");
    } else if meta.is_void(ty) {
        _print_str("void");
    }
}

str_len :: (s: str) -> usize {
    s_ptr := s as ^u8;

    idx := 0;
    loop {
        ch := ptr.read(s_ptr, idx);

        if ch == 0 { break; }

        idx = idx + 1;
    }

    idx
}

str_eq :: (first: str, second: str) -> bool {
    first_ptr := first as ^u8;
    second_ptr := second as ^u8;

    idx := 0;
    loop {
        first_ch := ptr.read(first_ptr, idx);
        second_ch := ptr.read(second_ptr, idx);
        
        if first_ch != second_ch {
            return false;
        }

        if first_ch == 0 { break; }

        idx = idx + 1;
    }

    true
}
