core :: mod "core";
libc :: core.libc;
math :: core.math;
ptr :: core.ptr;

StringBuilder :: struct {
    buf: ^mut char,
    len: usize,
    cap: usize,
};

make :: () -> StringBuilder {
    buf := (^mut char).(ptr.mut_null());

    StringBuilder.{
        buf = buf,
        len = 0,
        cap = 0,
    }
};

make_with_capacity :: (cap: usize) -> StringBuilder {
    if cap == 0 { return make(); }

    buf := (^mut char).(libc.malloc(cap));

    if cap > 0 && ptr.is_null(buf) {
        core.panic_with("Error allocating the StringBuilder");
    }

    StringBuilder.{
        buf = buf,
        len = 0,
        cap = cap,
    }
}

free :: (self: ^mut StringBuilder) {
    libc.free(self.buf);
    // to make sure the string isn't accidentally used after free
    self.cap = 0;
    self.len = 0;
}

shrink_to_fit :: (self: ^mut StringBuilder) {
    if self.len != 0 && self.len < self.cap {
        self.buf = (^mut char).(libc.realloc(self.buf, self.len));
        self.cap = self.len;

        if self.cap > 0 && ptr.is_null(self.buf) {
            core.panic_with("Error reallocating the StringBuilder");
        }
    }
}

_grow_by :: (self: ^mut StringBuilder, len: usize) {
    if self.len + len > self.cap {
        new_cap := math.max_usize(self.cap * 2, 1);
        new_cap = math.max_usize(
	                        math.next_pow_of_two(self.len + len), 
				new_cap
				);

        self.buf = (^mut char).(libc.realloc(self.buf, new_cap));
        self.cap = new_cap;

        if ptr.is_null(self.buf) {
            core.panic_with("Error reallocating the StringBuilder");
        }
    }
}

append_char :: (self: ^mut StringBuilder, ch: char) {
    _grow_by(self, 1);

    ptr.write(self.buf, u8.(ch), self.len);

    self.len = self.len + 1;
}

append_str :: (self: ^mut StringBuilder, s: str) {
    len :: core.str_len(s);

    _grow_by(self, len);

    offset := ptr.mut_offset(self.buf, self.len);

    libc.memcpy(offset, rawptr.(s), len);
    
    self.len = self.len + len;
}

as_slice :: (self: ^mut StringBuilder) -> [] char {
    []char.(ptr.slice_from_raw_parts(self.buf, self.len))
}

print :: (self: ^StringBuilder) {
    idx := 0;
    while idx < self.len {
        ch := char.(ptr.read(self.buf, idx));
        libc.putchar(ch);
        idx = idx + 1;
    }
}

println :: (self: ^StringBuilder) {
    print(self);
    libc.putchar('\n');
}
