
// compiler defined
to_raw :: (ptr: ^any) -> usize extern;
// compiler defined
const_from_raw :: (raw: usize) -> ^any extern;
// compiler defined
mut_from_raw :: (raw: usize) -> ^mut any extern;

const_offset :: (ptr: ^any, offset: usize) -> ^any {
    const_from_raw(to_raw(ptr) + offset)
}

mut_offset :: (ptr: ^mut any, offset: usize) -> ^mut any {
    mut_from_raw(to_raw(ptr) + offset)
}

read :: (ptr: ^any, offset: usize) -> u8 {
    plus_offset := const_offset(ptr, offset) as ^u8;
    plus_offset^
}

write :: (ptr: ^mut any, byte: u8, offset: usize) {
    plus_offset := mut_offset(ptr, offset) as ^mut u8;
    plus_offset^ = byte;
}

null :: () -> ^any {
    const_from_raw(0)
}

mut_null :: () -> ^mut any {
    mut_from_raw(0)
}

is_null :: (ptr: ^any) -> bool {
    to_raw(ptr) == 0
}

// constructs a slice from a pointer and a length
//
// ```capy
// data := [3] u32 { 1, 2, 3 };
// 
// slice := slice_from_raw_parts(^data, 3) as [] u32;
//
// core.println(slice);
// ```
slice_from_raw_parts :: (ptr: ^any, len: usize) -> [] any {
    Raw_Slice :: struct {
        len: usize,
        ptr: ^any,
    };

    raw := Raw_Slice {
        len: len,
        ptr: ptr,
    };

    {^raw as ^any as ^[]any}^
}
