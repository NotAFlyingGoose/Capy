
positive_inf :: comptime 1.0  / 0.0;
negative_inf :: comptime -1.0 / 0.0;
// NaN != NaN, so use is_NaN instead
NaN :: comptime 0.0 / 0.0;

pow :: (base: i32, exp: i32) -> i32 {
    result := 1;

    i := 0;
    while i < exp {
        result = result * base;
        i = i + 1;
    }

    result
}

euler_const : f64 : 2.718281828459045235;
taylor_iterations :: 20;

ln :: (x: f64) -> f64 {
    if x <= 0 {
        return 0 / 0;
    }

    x := x;

    power_adjust := 0;
    while x > 1 {
        x = x / euler_const;
        power_adjust = power_adjust + 1;
    }
    while x < .25 {
        x = x * euler_const;
        power_adjust = power_adjust - 1;
    }

    x = x - 1;
    t := 0;
    s := 1;
    z := x;
    k := 1;
    while k <= taylor_iterations {
        t = t + z * s / k;
        z = z * x;
        s = -s;
        k = k + 1;
    }

    t + power_adjust
}

log10 :: (x: f64) -> f64 {
    ln(x) / comptime ln(10)
}

max_usize :: (x: usize, y: usize) -> usize {
    if x > y {
        x
    } else {
        y
    }
}

min_usize :: (x: usize, y: usize) -> usize {
    if x < y {
        x
    } else {
        y
    }
}

next_pow_of_two :: (x: usize) -> usize {
    // see https://stackoverflow.com/questions/1322510/given-an-integer-how-do-i-find-the-next-largest-power-of-two-using-bit-twiddlin/1322548#1322548 
    // for an explanation of how this works
    x := x - 1;

    x = x | {x >> 1};
    x = x | {x >> 2};
    x = x | {x >> 4};
    x = x | {x >> 8};
    x = x | {x >> 16};
    x = x | {x >> 32};
    x = x | {x >> 64}; // for platforms with a register width of 128
                       // for other platforms this should compile down to a nop

    x + 1
}

is_NaN :: (n: f64) -> bool {
    n != n
}
