
// this is all going to change.
// `pub` is going to be added
// after that, there will be a way to bypass it

fmt :: import "fmt.capy";
libc :: import "libc.capy";
ptr :: import "ptr.capy";
math :: import "math.capy";
meta :: import "meta.capy";

string_builder :: import "structs/string_builder.capy";
list :: import "structs/list.capy";

// a builtin slice that gets populated with `argc` and `argv`
// just before `main` gets called
args : [] str : extern;

// builtin
len :: (slice: [] any) -> usize extern;

// for testing.
// exits the program if a check failed
assert :: (condition: bool) {
    if !condition {
        _print_str("assertion failed!\n");
        libc.exit(1);
    }
}

// for testing.
// exits the program if a check failed, and prints the specificed message
assert_with :: (condition: bool, message: str) {
    if !condition {
        _print_str("assertion failed: ");
        _print_str(message);
        _print_str("\n");
        libc.exit(1);
    }
}

// exits the program due to an unrecoverable state being reached
panic :: () {
    _print_str("explicit panic!\n");
    libc.exit(1);
}

// exits the program due to an unrecoverable state being reached,
// and prints the specificed message
panic_with :: (message: str) {
    _print_str("explicit panic: ");
    _print_str(message);
    _print_str("\n");
    libc.exit(1);
}

// exits the program due to an unexpected code path being reached.
unreachable :: () {
    _print_str("entered unreachable code!\n");
    libc.exit(1);
}

// exits the program due to an unexpected code path being reached,
// and prints the specificed message
unreachable_with :: (message: str) {
    _print_str("entered unreachable code: ");
    _print_str(message);
    _print_str("\n");
    libc.exit(1);
}

// exits the program due to unfinished code being reached
todo :: () {
    _print_str("not yet implemented!\n");
    libc.exit(1);
}

// exits the program due to unfinished code being reached,
// and prints the specificed message
todo_with :: (message: str) {
    _print_str("not yet implemented: ");
    _print_str(message);
    _print_str("\n");
    libc.exit(1);
}

any_from_raw_parts :: (data: rawptr, ty: type) -> any {
    Any :: struct {
        ty: type,
        data: rawptr,
    };

    raw := Any.{
        ty = ty,
        data = data,
    };

    // transmute Any to any using rawptr
    (^any).(rawptr.(^raw))^
}

// see `print`
println :: (values: ...any) {
    // we can't just do `print(values)` because then values will be passed in as a single slice, as opposed to multiple arguments.
    // TODO: add a spread operator like JavaScript
    val_idx := 0;
    while val_idx < values.len {
        print(values[val_idx]);
        val_idx = val_idx + 1;
    }
    libc.putchar('\n');
}

_print_str :: (text: str) {
    // cast str to ^char
    text := (^char).(text);

    i := 0;
    loop {
        ch := char.(ptr.read(text, i));
        if ch == '\0' {
            break;
        }

        libc.putchar(ch);

        i = i + 1;
    }
}

// the print function uses the `Any` type to be able to print
// all possible values. you don't need to implement `Display` or `Debug`,
// struct printing just works due to the reflection system.
print :: (values: ...any) {
    val_idx := 0;
    while val_idx < values.len {
        val := values[val_idx];

        ty := val.ty;
        data := val.ptr;

        switch info in meta.get_type_info(ty) {
            Int => {
                str := if info.signed {
                    num := if info.bit_width == 8 {
                        i64.((^i8).(data)^)
                    } else if info.bit_width == 16 {
                        i64.((^i16).(data)^)
                    } else if info.bit_width == 32 {
                        i64.((^i32).(data)^)
                    } else if info.bit_width == 64 {
                        i64.((^i64).(data)^)
                    } else if info.bit_width == 128 {
                        i64.((^i128).(data)^)
                    } else {
                        unreachable();
                        0
                    };

                    fmt.i64_to_string(num)
                } else {
                    num := if info.bit_width == 8 {
                        u64.((^u8).(data)^)
                    } else if info.bit_width == 16 {
                        u64.((^u16).(data)^)
                    } else if info.bit_width == 32 {
                        u64.((^u32).(data)^)
                    } else if info.bit_width == 64 {
                        u64.((^u64).(data)^)
                    } else if info.bit_width == 128 {
                        u64.((^u128).(data)^)
                    } else {
                        unreachable();
                        0
                    };

                    fmt.u64_to_string(num)
                };
                defer string_builder.free(^mut str);

                string_builder.print(^str);
            }
            Float => {
                num := if info.bit_width == 32 {
                    f64.((^f32).(data)^)
                } else if info.bit_width == 64 {
                    f64.((^f64).(data)^)
                } else {
                    unreachable();
                    0
                };

                str := fmt.f64_to_string(num);
                defer string_builder.free(^mut str);

                string_builder.print(^str);
            }
            Bool => {
                if (^bool).(data)^ {
                    _print_str("true");
                } else {
                    _print_str("false");
                }
            }
            String => _print_str((^str).(data)^),
            Char => libc.putchar((^char).(data)^),
            Array => {
                elem_stride := meta.stride_of(info.sub_ty);

                _print_str("[ ");

                idx := 0;
                while idx < info.len {
                    addr := ptr.const_offset(data, elem_stride * idx);
                    
                    print(any_from_raw_parts(addr, info.sub_ty));

                    if idx < info.len - 1 {
                        _print_str(", ");
                    }
                    
                    idx = idx + 1;
                }

                _print_str(" ]");
            }
            Slice => {
                elem_stride := meta.stride_of(info.sub_ty);

                slice := (^[] any).(data);
                len := slice.len;

                _print_str("[ ");

                idx := 0;
                while idx < len {
                    addr := ptr.const_offset(slice.ptr, elem_stride * idx);

                    print(any_from_raw_parts(addr, info.sub_ty));

                    if idx < len - 1 {
                        _print_str(", ");
                    }

                    idx = idx + 1;
                }

                _print_str(" ]");
            }
            Pointer => {
                _print_str("^");
                // since data is a pointer, we can safely dereference it
                print(any_from_raw_parts((^rawptr).(data)^, info.sub_ty));
            }
            Distinct => {
                print(any_from_raw_parts(data, info.sub_ty));
            }
            Struct => {
                _print_str("{ ");

                idx := 0;
                while idx < info.members.len {
                    member := info.members[idx];

                    _print_str(member.name);
                    _print_str(" = ");

                    addr := ptr.const_offset(data, member.offset);

                    print(any_from_raw_parts(addr, member.ty));

                    if idx < info.members.len - 1 {
                        _print_str(", ");
                    }
                    idx = idx + 1;
                }

                _print_str(" }");
            }
            Enum => {
                discriminant := (^u8).(ptr.const_offset(data, info.discriminant_offset))^;

                idx := 0;
                while idx < info.variants.len {
                    variant := info.variants[idx];

                    variant_info := switch v in meta.get_type_info(variant) {
                        Variant => v,
                        _ => {
                            unreachable_with("all variants of the enum should be `Type_Info.Variant`");
                            meta.Type_Info.Variant.{sub_ty=void,discriminant=0}
                        },
                    };

                    if variant_info.discriminant == discriminant {
                        print(any_from_raw_parts(data, variant_info.sub_ty));
                        break;
                    }

                    idx = idx + 1;
                }
            }
            Variant => {
                print(any_from_raw_parts(data, info.sub_ty));
            }
            Function => _print_str("{function}"),
            File => _print_str("{import}"),
            Meta_Type => {
                print_type_info((^type).(data)^);
            }
            Any => {
                print((^any).(data)^);
            },
            Raw_Ptr => _print_str("{rawptr}"),
            Raw_Slice => {
                _print_str("[ {rawslice} ; ");

                data := (^rawslice).(data)^;
                print(data.len);

                _print_str(" ]");
            },
            Void => _print_str("()"),
        }

        val_idx = val_idx + 1;
    }
}

// prints a type id as a human readable string
print_type_info :: (ty: type) {
    switch info in meta.get_type_info(ty) {
        Int => {
            if info.signed {
                libc.putchar('i');
            } else {
                libc.putchar('u');
            }

            str := fmt.i64_to_string(info.bit_width);
            defer string_builder.free(^mut str);

            string_builder.print(^str);
        }
        Float => {
            libc.putchar('f');

            str := fmt.i64_to_string(info.bit_width);
            defer string_builder.free(^mut str);

            string_builder.print(^str);
        }
        Bool => _print_str("bool"),
        String => _print_str("str"),
        Char => _print_str("char"),
        Array => {
            libc.putchar('[');

            str := fmt.i64_to_string(i64.(info.len));
            defer string_builder.free(^mut str);
            string_builder.print(^str);

            libc.putchar(']');
            libc.putchar(' ');

            print_type_info(info.sub_ty);
        }
        Slice => {
            _print_str("[] ");
            print_type_info(info.sub_ty);
        }
        Pointer => {
            libc.putchar('^');
            print_type_info(info.sub_ty);
        }
        Distinct => {
            _print_str("distinct ");
            print_type_info(info.sub_ty);
        }
        Struct => {
            _print_str("struct { ");

            idx := 0;
            while idx < info.members.len {
                member := info.members[idx];

                _print_str(member.name);
                _print_str(": ");

                print_type_info(member.ty);

                if idx < info.members.len - 1 {
                    _print_str(", ");
                }
                idx = idx + 1;
            }

            _print_str(" }");
        }
        Enum => {
            _print_str("enum { ");

            idx := 0;
            while idx < info.variants.len {
                variant := info.variants[idx];

                // todo: maybe include the name of the variant here
                print_type_info(variant);

                if idx < info.variants.len - 1 {
                    _print_str(", ");
                }
                idx = idx + 1;
            }

            _print_str(" }");
        }
        Variant => {
            _print_str("variant ");
            print_type_info(info.sub_ty);

            _print_str(" | ");
            str := fmt.i64_to_string(i64.(info.discriminant));
            defer string_builder.free(^mut str);
            string_builder.print(^str);
        }
        Function => _print_str("{function type}"),
        File => _print_str("{import}"),
        Meta_Type => _print_str("type"),
        Any => _print_str("any"),
        Raw_Ptr => if info.mutable {
            _print_str("mut rawptr")
        } else {
            _print_str("rawptr")
        },
        Raw_Slice => _print_str("rawslice"),
        Void => _print_str("void"),
    }
}

// gets the length of a string.
// strings in Capy are not slices yet,
// and so are all null terminated like C.
str_len :: (s: str) -> usize {
    // cast str to ^u8
    s_ptr := (^u8).(s);

    idx := 0;
    loop {
        ch := ptr.read(s_ptr, idx);

        if ch == 0 { break; }

        idx = idx + 1;
    }

    idx
}

// checks to see if two strings are equal
str_eq :: (first: str, second: str) -> bool {
    first_ptr := (^u8).(first);
    second_ptr := (^u8).(second);

    idx := 0;
    loop {
        first_ch := ptr.read(first_ptr, idx);
        second_ch := ptr.read(second_ptr, idx);
        
        if first_ch != second_ch {
            return false;
        }

        if first_ch == 0 || second_ch == 0 { 
	    return first_ch == second_ch;
	}

        idx = idx + 1;
    }

    true
}

// casts an `any` into the specificied memory.
// the buffer must have enough space for `expected`.
//
// this is more than just a memcpy, it casts `value`
// as needed so that the resulting type is `expected`.
//
// Think of this as a runtime `as` operator.
//
// The returned `any` is made of the given `expected` and `into`
//
// todo: add more tests for this function, it is probably very incomplete
cast_into :: (value: any, expected: type, into: mut rawptr) -> any {
    found_ty := value.ty;
    found_data := value.ptr;

    if found_ty == expected {
        libc.memcpy(into, found_data, meta.size_of(found_ty));
        return any_from_raw_parts(into, expected);
    }

    // unwrap distincts
    expected := expected;
    `l loop {
        switch info in meta.get_type_info(expected) {
            Distinct => {
                expected = info.sub_ty;
            }
            Variant => {
                expected = info.sub_ty;
            }
            _ => {
                // todo break expressions
                break l`;
            },
        }
    }

    // do actual casting
    switch from_info in meta.get_type_info(found_ty) {
        Int => {
            num := if from_info.bit_width == 8 {
                u64.((^u8).(found_data)^)
            } else if from_info.bit_width == 16 {
                u64.((^u16).(found_data)^)
            } else if from_info.bit_width == 32 {
                u64.((^u32).(found_data)^)
            } else if from_info.bit_width == 64 {
                u64.((^u64).(found_data)^)
            } else if from_info.bit_width == 128 {
                u64.((^u128).(found_data)^)
            } else {
                unreachable();
                0
            };

            switch into_info in meta.get_type_info(expected) {
                Int => {
                    // int -> int
                    if into_info.bit_width == 8 {
                        (^mut u8).(into) ^= u8.(num);
                    } else if into_info.bit_width == 16 {
                        (^mut u16).(into) ^= u16.(num);
                    } else if into_info.bit_width == 32 {
                        (^mut u32).(into) ^= u32.(num);
                    } else if into_info.bit_width == 64 {
                        (^mut u64).(into) ^= u64.(num);
                    } else if into_info.bit_width == 128 {
                        (^mut u128).(into) ^= u128.(num);
                    } else {
                        unreachable();
                    }       
                }
                Float => {
                    // int -> float
                    if into_info.bit_width == 32 {
                        (^mut f32).(into) ^= f32.(num);
                    } else if into_info.bit_width == 64 {
                        (^mut f64).(into) ^= f64.(num);
                    } else {
                        unreachable();
                    }
                }
                Bool => {
                    (^mut bool).(into) ^= bool.(num);
                }
                Char => {
                    (^mut char).(into) ^= char.(num);
                }
                _ => todo_with("only supports int -> int, int -> float, int -> bool, int -> char")
            }
        }
        Float => {
            num := if from_info.bit_width == 32 {
                f64.((^f32).(found_data)^)
            } else if from_info.bit_width == 64 {
                f64.((^f64).(found_data)^)
            } else {
                unreachable();
                0
            };

            switch into_info in meta.get_type_info(expected) {
                Int => {
                    // float -> int
                    if into_info.bit_width == 8 {
                        (^mut u8).(into) ^= u8.(num);
                    } else if into_info.bit_width == 16 {
                        (^mut u16).(into) ^= u16.(num);
                    } else if into_info.bit_width == 32 {
                        (^mut u32).(into) ^= u32.(num);
                    } else if into_info.bit_width == 64 {
                        (^mut u64).(into) ^= u64.(num);
                    } else if into_info.bit_width == 128 {
                        (^mut u128).(into) ^= u128.(num);
                    } else {
                        unreachable();
                    }       
                }
                Float => {
                    // float -> float
                    if into_info.bit_width == 32 {
                        (^mut f32).(into) ^= f32.(num);
                    } else if into_info.bit_width == 64 {
                        (^mut f64).(into) ^= f64.(num);
                    } else {
                        unreachable();
                    }
                }
                Bool => {
                    (^mut bool).(into) ^= bool.(num);
                }
                Char => {
                    (^mut char).(into) ^= char.(num);
                }
                _ => todo_with("only supports float -> int, float -> float, float -> bool, and float -> char")
            }
        }
        Bool => {
            value := (^bool).(found_data)^;

            switch into_info in meta.get_type_info(expected) {
                Int => {
                    // bool -> int
                    if into_info.bit_width == 8 {
                        (^mut u8).(into) ^= u8.(value);
                    } else if into_info.bit_width == 16 {
                        (^mut u16).(into) ^= u16.(value);
                    } else if into_info.bit_width == 32 {
                        (^mut u32).(into) ^= u32.(value);
                    } else if into_info.bit_width == 64 {
                        (^mut u64).(into) ^= u64.(value);
                    } else if into_info.bit_width == 128 {
                        (^mut u128).(into) ^= u128.(value);
                    } else {
                        unreachable();
                    }       
                }
                Float => {
                    // bool -> float
                    if into_info.bit_width == 32 {
                        (^mut f32).(into) ^= f32.(value);
                    } else if into_info.bit_width == 64 {
                        (^mut f64).(into) ^= f64.(value);
                    } else {
                        unreachable();
                    }
                }
                Bool => {
                    // bool -> bool
                    (^mut bool).(into) ^= bool.(value);
                }
                Char => {
                    // bool -> char
                    (^mut char).(into) ^= char.(value);
                }
                _ => todo_with("only supports bool -> int, bool -> float, bool -> bool, and bool -> char")
            }
        }
        String => {
            assert_with(
                found_ty == expected,
                "the string type can only be cast to itself",
            );
            (^mut usize).(into) ^= (^usize).(found_data)^;
        }
        Char => {
            value := (^bool).(found_data)^;

            switch into_info in meta.get_type_info(expected) {
                Int => {
                    // char -> int
                    if into_info.bit_width == 8 {
                        (^mut u8).(into) ^= u8.(value);
                    } else if into_info.bit_width == 16 {
                        (^mut u16).(into) ^= u16.(value);
                    } else if into_info.bit_width == 32 {
                        (^mut u32).(into) ^= u32.(value);
                    } else if into_info.bit_width == 64 {
                        (^mut u64).(into) ^= u64.(value);
                    } else if into_info.bit_width == 128 {
                        (^mut u128).(into) ^= u128.(value);
                    } else {
                        unreachable();
                    }       
                }
                Float => {
                    // char -> float
                    if into_info.bit_width == 32 {
                        (^mut f32).(into) ^= f32.(value);
                    } else if into_info.bit_width == 64 {
                        (^mut f64).(into) ^= f64.(value);
                    } else {
                        unreachable();
                    }
                }
                Bool => {
                    // char -> bool
                    (^mut bool).(into) ^= bool.(value);
                }
                Char => {
                    // char -> char
                    (^mut char).(into) ^= char.(value);
                }
                _ => todo_with("only supports char -> int, char -> float, char -> bool, and char -> char"),
            }
        }
        Array => {
            switch into_info in meta.get_type_info(expected) {
                Array => {
                    // array -> array
                    // todo: we can do much better than this
                    assert_with(from_info.sub_ty == into_info.sub_ty, "array -> array must have the same sub type");
                    libc.memcpy(into, found_data, meta.size_of(found_ty));
                }
                Slice => {
                    // array -> slice
                    assert_with(from_info.sub_ty == into_info.sub_ty, "array -> slice must have the same sub type");
                    (^mut rawslice).(into) ^= ptr.slice_from_raw_parts(found_data, from_info.len);
                }
                _ => todo_with("only supports array -> array and array -> slice"),
            }
        }
        Slice => {
            switch into_info in meta.get_type_info(expected) {
                Array => {
                    // slice -> array
                    // todo: we can do much better than this
                    assert_with(from_info.sub_ty == into_info.sub_ty, "slice -> array must have the same sub type");
                    libc.memcpy(into, found_data, meta.stride_of(into_info.sub_ty) * (^rawslice).(found_data).len);
                }
                Slice => {
                    // slice -> slice
                    assert_with(from_info.sub_ty == into_info.sub_ty, "slice -> slice must have the same sub type");
                    (^mut rawslice).(into) ^= (^rawslice).(found_data)^;
                }
                _ => todo_with("only supports slice -> array and slice -> slice"),
            }
        }
        Raw_Slice => {
            switch into_info in meta.get_type_info(expected) {
                Array => {
                    // slice -> array
                    // todo: we can do much better than this
                    libc.memcpy(into, found_data, meta.size_of(into_info.sub_ty) * (^rawslice).(found_data).len);
                }
                Slice => {
                    // slice -> slice
                    (^mut rawslice).(into) ^= (^rawslice).(found_data)^;
                }
                _ => todo_with("only supports slice -> array and slice -> slice"),
            }
        }
        Pointer => {
            (^mut usize).(into) ^= (^usize).(found_data)^;
        }
        Raw_Ptr => {
            (^mut usize).(into) ^= (^usize).(found_data)^;
        }
        Distinct => {
            cast_into(
                any_from_raw_parts(
                    found_data,
                    from_info.sub_ty,
                ),
                expected,
                into
            );    
        }
        Struct => {
            assert_with(
                found_ty == expected,
                "struct types can only be casted to themselves",
            );
            libc.memcpy(into, found_data, meta.size_of(found_ty));
        }
        Enum => {
            assert_with(
                found_ty == expected,
                "enum types can only be casted to themselves",
            );
            libc.memcpy(into, found_data, meta.size_of(found_ty));
        }
        Variant => {
            switch into_info in meta.get_type_info(expected) {
                Enum => {
                    libc.memcpy(into, found_data, meta.size_of(found_ty));

                    discrim := (^mut u8).(ptr.mut_offset(into, into_info.discriminant_offset));

                    discrim ^= u8.(from_info.discriminant);
                }
                _ => {
                    cast_into(
                        any_from_raw_parts(
                            found_data,
                            from_info.sub_ty,
                        ),
                        expected,
                        into
                    );
                }
            }
        }
        Function => {
            assert_with(
                found_ty == expected,
                "function types can only be casted to themselves",
            );
            (^mut usize).(into) ^= (^usize).(found_data)^;
        }
        File => {
            assert_with(
                found_ty == expected,
                "file types can only be casted to themselves",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        }
        Meta_Type => {
            assert_with(
                found_ty == expected,
                "type ids can only be casted to themselves",
            );
            (^mut type).(into) ^= (^type).(found_data)^;
        }
        Any => {
            assert_with(
                found_ty == expected,
                "the any type can only be cast to itself",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        }
        Void => {
            assert_with(
                found_ty == expected,
                "the void type can only be cast to itself",
            );
            assert(meta.size_of(found_ty) == 0);
            // do nothing :)
        }
    }

    any_from_raw_parts(into, expected)
}

// todo: make this a comptime parameter
type_of :: (val: any) -> type {
    val.ty
}

