
// todo: I want to do smth more like zig's `allocPrint` and `bufPrint`
// https://github.com/ziglang/zig/blob/905c85be968e6823305887474d2a821dac82f16c/lib/std/fmt.zig#L1436

core :: mod "core";
ptr :: core.ptr;
math :: core.math;
string_builder :: core.string_builder;

StringBuilder :: string_builder.StringBuilder;

i64_to_string :: (n: i64) -> StringBuilder {
    // idk man i'm just copying rust
    str := string_builder.make_with_capacity(39);
    
    new_len := _write_i64_to_buf(n, true, str.buf as ^mut any as ^mut u8, 0, 0);

    str.len = new_len;

    string_builder.shrink_to_fit(^mut str);

    str
}

u64_to_string :: (n: u64) -> StringBuilder {
    str := string_builder.make_with_capacity(39);
    
    new_len := _write_i64_to_buf(n as i64, false, str.buf as ^mut any as ^mut u8, 0, 0);

    str.len = new_len;

    string_builder.shrink_to_fit(^mut str);

    str
}

f64_to_string :: (n: f64) -> StringBuilder {
    str := string_builder.make_with_capacity(39 * 2 + 1);

    new_len := _write_f64_to_buf(n, str.buf as ^mut any as ^mut u8, 3);

    str.len = new_len;

    string_builder.shrink_to_fit(^mut str);

    str
}

_reverse_buf :: (buf: ^mut u8, start: usize, len: usize) {
    i := start;
    j := len - 1;
    temp := 0;

    while i < j {
        temp = ptr.read(buf, i);
        ptr.write(buf, ptr.read(buf, j), i);
        ptr.write(buf, temp, j);
        i = i + 1;
        j = j - 1;
    }
}

_write_i64_to_buf :: (n: i64, signed: bool, buf: ^mut u8, buf_offset: usize, required_digits: usize) -> usize {
    idx := buf_offset;

    n := n;
    is_neg := signed && n < 0;
    
    if is_neg {
        n = -n;
    }

    if n == 0 {
        ptr.write(buf, '0' as u8, idx);
        idx = idx + 1;
    }

    while n != 0 {
        remainder := n % 10;
        n = n / 10;

        ptr.write(buf, {'0' as u8 + remainder} as u8, idx);

        idx = idx + 1;
    }

    while idx - buf_offset < required_digits {
        ptr.write(buf, '0' as u8, idx);
        idx = idx + 1;
    }

    if is_neg {
        ptr.write(buf, '-' as u8, idx);
        idx = idx + 1;
    }

    _reverse_buf(buf, buf_offset, idx);

    idx
}

_write_f64_to_buf :: (n: f64, buf: ^mut u8, afterpoint: usize) -> usize {
    if math.is_NaN(n) {
        ptr.write(buf, 'N' as u8, 0);
        ptr.write(buf, 'a' as u8, 1);
        ptr.write(buf, 'N' as u8, 2);
        return 3;
    } else if n == math.positive_inf {
        ptr.write(buf, '+' as u8, 0);
        ptr.write(buf, 'I' as u8, 1);
        ptr.write(buf, 'n' as u8, 2);
        ptr.write(buf, 'f' as u8, 3);
        return 4;
    } else if n == math.negative_inf {
        ptr.write(buf, '-' as u8, 0);
        ptr.write(buf, 'I' as u8, 1);
        ptr.write(buf, 'n' as u8, 2);
        ptr.write(buf, 'f' as u8, 3);
        return 4;
    }

    ipart := n as i64;

    fpart := n - ipart as f64;

    idx := _write_i64_to_buf(ipart, true, buf, 0, 0);

    if afterpoint != 0 {
        ptr.write(buf, '.' as u8, idx);

        fpart = fpart * math.pow(10, afterpoint as i32) as f64;

        // add one for the period
        idx = _write_i64_to_buf(fpart as i64, false, buf, idx + 1, afterpoint);
    }

    idx
}
