core :: mod "core";
meta :: core.meta;
io :: import "io.capy";

imaginary :: distinct i32;

Foo :: struct {
    a: bool,
};

Person :: struct {
    name: str,
    age: i32,
};

Dessert :: enum {
    Ice_Cream,
    Chocolate_Cake | 2,
    Apple_Pie: struct {
        warm: bool,
        crumble: bool,
        crust_thickness: f64,
    }           | 10,
    Cookie: f32, // cookie temperature or something
    Brownie,
    Cheesecake  | 42,
    Pudding     | 45,
    Milkshake: struct {
        malt: bool,
    }
};

Farm_Animal :: enum {
    Cow,
    Sheep,
    Chicken,
    Pig,
};

main :: () {
    core.println("Reflection!\n");

    check_layouts();
    check_equality();
    check_type_info();
    check_any();
}

check_type_info :: () {
    Bar :: struct {
        text: str,
        flag: bool,
        array: [3] i16,
    };

    print_info(i32);
    print_info(u8);
    print_info(u128);
    print_info(isize);
    print_info(f32);
    print_info(f64);
    print_info([5] i32);
    print_info([1000][3]f64);
    print_info([]i32);
    print_info(^i32);
    print_info(^^^i128);
    print_info(distinct i32);
    print_info(distinct [2] distinct i8);
    print_info(Foo);
    print_info(Bar);
    print_info(Person);
    print_info(core.Any);
    print_info(distinct Foo);
    print_info(distinct Farm_Animal);
    print_info(Dessert);
    print_info(Dessert.Ice_Cream);
    print_info(Dessert.Apple_Pie);
    print_info(Dessert.Cookie);
    print_info(Dessert.Milkshake);
}

check_any :: () {
    Bar :: struct {
        text: str,
        flag: bool,
        array: [3] i16,
    };

    // The `core.Any` type combines a type id with an opaque pointer
    // to allow representation of *any* possible value in your program.
    // `core.Any` powers the `core.println` function, which does something
    // different depending on the type of the `core.Any` passed in.

    core.println(core.Any.{ ty = u8, data = (^u8).(^123) });
    core.println(core.Any.{ ty = [6]i32, data = ^i32.[ 4, 8, 15, 16, 23, 42 ] });
    core.println(core.Any.{ ty = []i32, data = ^[]i32.(i32.[ 1, 2, 3 ]) });
    core.println(core.Any.{ ty = ^i32, data = (^^i32).(^^52) });

    // `core.Any` of `core.Any`
    
    i := core.Any.{ ty = imaginary, data = (^imaginary).(^42) };
    core.println(i);
    core.println(core.Any.{ ty = core.Any, data = ^i });

    // auto cast to `core.Any` (or any other struct with a `type` and a `^any`)

    core.println(256);
    core.println("hello");
    core.println({});
    
    // printing types
    core.println(i32);
    core.println(^Bar);
    core.println(core.Any);

    // printing arrays
    core.println(.[3, -1, 4, 1, 5, 9]);
    core.println([]i32.( .[4, 8, 15, 16, 23, 42] ));
    core.println(core.Any.[1, "hello", true, 5.3]);

    // printing structs
    core.println(Bar.{
        text = "Hello",
        flag = false,
        array = i16.[1, 2, 3],
    });
    core.println(.{
        hello = "world",
        foo = .{
            bar = .{
                baz = .{
                    qux = 1.2,
                }
            }
        }
    });

    // printing enums
    core.println(Dessert.Apple_Pie.{
        warm = true,
        crumble = false,
        crust_thickness = 1.3,
    });
    core.println(Dessert.Cookie.(1089.5));
    core.println(Dessert.Brownie.(())); // todo: change how void variants are instantiated
    core.println(Dessert.Cheesecake.(()));
    core.println(Dessert.Milkshake.{
        malt = true,
    });
    // since `Dessert.Apple_Pie` is its own type, this will make sure that the value
    // is being stored in memory as an actual enum (Dessert), and not a struct (Dessert.Apple_Pie)
    core.println(Dessert.(Dessert.Apple_Pie.{
        warm = false,
        crumble = true,
        crust_thickness = 0.5,
    }));
    core.println(Dessert.(Dessert.Cookie.(30.0)));
    core.println(Dessert.(Dessert.Brownie.(())));
    core.println(Dessert.(Dessert.Cheesecake.(())));
    core.println(Dessert.(Dessert.Milkshake.{
        malt = false,
    }));
}

check_equality :: () {
    io.label("i32 == i16 : ", i32 == i16);
    io.label("i32 == u32 : ", i32 == u32);
    io.label("i32 == i32 : ", i32 == i32);
    io.label("Foo == Person : ", Foo == Person);
    io.label("Person == Person : ", Person == Person);
    io.label("[5] Person == [6] Person : ", [5] Person == [6] Person);
    io.label("[5] Foo == [5] Person : ", [5] Foo == [5] Person);
    io.label("[6] Person == [6] Person : ", [6] Person == [6] Person);
    io.label("^Person == ^Foo : ", ^Person == ^Foo);
    io.label("^Person == ^Person : ", ^Person == ^Person);

    d1Person :: distinct Person;
    d2Person :: distinct Person;

    io.label("Person == distinct 'a Person : ", Person == d1Person);
    io.label("distinct 'a Person == distinct 'b Person : ", d1Person == d2Person);
    io.label("distinct 'b Person == distinct 'b Person : ", d2Person == d2Person);
    
    io.label("Dessert == Farm_Animal : ", Dessert == Farm_Animal);
    io.label("Dessert == Dessert : ", Dessert == Dessert);
    io.label("Dessert.Apple_Pie == Dessert.Cheesecake : ", Dessert.Apple_Pie == Dessert.Cheesecake);
    io.label("Dessert.Cheesecake == Dessert.Cheesecake : ", Dessert.Cheesecake == Dessert.Cheesecake);
    io.label("Farm_Animal.Cow == Dessert.Ice_Cream : ", Farm_Animal.Cow == Dessert.Ice_Cream);
    io.label("Farm_Animal.Cow == Farm_Animal.Cow : ", Farm_Animal.Cow == Farm_Animal.Cow);

    io.label("() -> void == (x : i32) -> f32 : ", () -> void == (x: i32) -> f32);
    io.label("() -> void == () -> void : ", () -> void == () -> void);

    core.println("");
}

check_layouts :: () {
    print_type_layout("i32               ", i32);
    print_type_layout("i64               ", i64);
    print_type_layout("u64               ", u64);
    print_type_layout("i8                ", i8);
    print_type_layout("u128              ", u128);
    print_type_layout("usize             ", usize);
    print_type_layout("f32               ", f32);
    print_type_layout("void              ", void);
    print_type_layout("any               ", any);
    print_type_layout("str               ", str);
    print_type_layout("char              ", char);
    print_type_layout("type              ", type);
    print_type_layout("Person            ", Person);
    print_type_layout("Foo               ", Foo);
    print_type_layout("[6] Person        ", [6] Person);
    print_type_layout("[ ] Person        ", [] Person);
    print_type_layout(" ^  Person        ", ^ Person);
    print_type_layout("distinct Person   ", distinct Person);
    print_type_layout("Dessert           ", Dessert);
    print_type_layout("Dessert.Brownie   ", Dessert.Brownie);
    print_type_layout("Dessert.Apple_Pie ", Dessert.Apple_Pie);
    print_type_layout("Dessert.Milkshake ", Dessert.Milkshake);
    print_type_layout("Farm_Animal       ", Farm_Animal);
    print_type_layout("Farm_Animal.Sheep ", Farm_Animal.Sheep);
    print_type_layout("()       -> void  ", () -> void);
    print_type_layout("(x: i32) -> f32   ", (x: i32) -> f32);

    core.println("");
}

print_type_layout :: (name: str, ty: type) {
    core.print(name);
    core.print(" (");
    core.print(meta.meta_to_raw(ty));
    core.print(") : size = ");
    core.print(meta.size_of(ty));
    core.print(", align = ");
    core.print(meta.align_of(ty));
    core.print(", stride = ");
    core.println(meta.stride_of(ty));
}

print_info :: (ty: type) {
    print_info_with_args(ty, 0);
    core.println("");
}

print_indent :: (indent: i32) {
    idx := 0;
    while idx < indent {
        core.libc.putchar(' ');
        idx = idx + 1;
    }
}

print_info_with_args :: (ty: type, indent: i32) {
    print_front :: (indent: i32, name: str) {
        print_indent(indent);
        core.println(name);
    };
    
    if meta.is_int(ty) {
        print_front(indent, "INT");

        info := meta.get_int_info(ty);

        print_indent(indent);
        io.label("bit_width = ", info.bit_width);
        print_indent(indent);
        core.print("signed    = ");
        res := if info.signed {
            "true"
        } else {
            "false"
        };
        core.println(res);
    } else if meta.is_float(ty) {
        print_front(indent, "FLOAT");

        info := meta.get_float_info(ty);

        print_indent(indent);
        io.label("bit_width = ", info.bit_width);
    } else if meta.is_array(ty) {
        print_front(indent, "ARRAY");

        info := meta.get_array_info(ty);

        print_indent(indent);
        io.label("len = ", info.len);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_slice(ty) {
        print_front(indent, "SLICE");

        info := meta.get_slice_info(ty);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_pointer(ty) {
        print_front(indent, "POINTER");

        info := meta.get_pointer_info(ty);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_distinct(ty) {
        print_front(indent, "DISTINCT");

        info := meta.get_distinct_info(ty);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.sub_ty, indent + 1);
    } else if meta.is_variant(ty) {
        print_front(indent, "VARIANT");

        info := meta.get_variant_info(ty);

        print_indent(indent);
        io.label("discriminant = ", info.discriminant);

        print_front(indent, "ty =");
        print_info_with_args(info.sub_ty, indent + 1);
    } else if meta.is_enum(ty) {
        print_front(indent, "ENUM");

        info := meta.get_enum_info(ty);

        print_indent(indent);
        io.label("discriminant_offset = ", info.discriminant_offset);

        print_front(indent, "variants =");

        idx := 0;
        while idx < info.variants.len {
            variant := info.variants[idx];
            print_info_with_args(variant, indent + 1);

            idx = idx + 1;
        }
    } else if meta.is_struct(ty) {
        print_front(indent, "STRUCT");

        info := meta.get_struct_info(ty);

        print_indent(indent);
        core.println("members =");

        indent := indent + 1;

        idx := 0;
        while idx < info.members.len {
            member := info.members[idx];

            print_indent(indent);
            core.print("name = ");
            core.println(member.name);

            print_indent(indent);
            io.label("offset = ", member.offset);

            print_indent(indent);
            core.println("ty =");
            print_info_with_args(member.ty, indent + 1);

            idx = idx + 1;
        }
    } else {
        name := if meta.is_bool(ty) {
            "BOOL"
        } else if meta.is_string(ty) {
            "STRING"
        } else if meta.is_char(ty) {
            "CHARACTER"
        } else if meta.is_meta_type(ty) {
            "META TYPE"
        } else if meta.is_any(ty) {
            "ANY"
        } else if meta.is_file(ty) {
            "FILE"
        } else if meta.is_function(ty) {
            "FUNCTION"
        } else if meta.is_void(ty) {
            "VOID"
        } else {
            raw := meta.meta_to_raw(ty);

            core.println("\nokay you fricked up bud");
            io.label("raw = ", raw);
            io.label("discrim = ", raw >> 26);
            io.label("idx = ", raw &~ (0b111111 << 26));

            core.unreachable();

            "unreachable"
        };
        print_front(indent, name);
    }
}
