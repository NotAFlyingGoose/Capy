core :: mod "core";

// with big nested arrays like this, it might be clearer to use `.[]` syntax instead like in `make_array`
global :: ([3][3] i8).[
        ([3] i8).[ i8.[105, 115, 125], i8.[105, 115, 125], i8.[105, 115, 125] ],
        ([3] i8).[ i8.[105, 115, 125], i8.[105, 115, 125], i8.[105, 115, 125] ],
        ([3] i8).[ i8.[105, 115, 125], i8.[105, 115, 125], i8.[105, 115, 125] ],
];

make_array :: (x: i8, y: i8, z: i8) -> [3][3][3] i8 {
    .[
        .[ .[x, y, z], .[x, y, z], .[x, y, z] ],
        .[ .[x, y, z], .[x, y, z], .[x, y, z] ],
        .[ .[x, y, z], .[x, y, z], .[x, y, z] ],
    ]
}

// prints out an array from the stack, and one from the data section
main :: () -> usize {
    my_array := make_array(2, 4, 6);

    // the stack memory of the above array isn't cleared, even if the old stack is overwritten by new function calls
    make_array(8, 10, 12);

    edit(^mut my_array);
    
    print_array_by_value(my_array, "my_array");

    core.println();

    print_array_by_ref(^global, "global");

    0
}

edit :: (arr: ^mut [3][3][3]i8) {
    arr[1][1] = i8.[127, 0, 42];
}

// While an array is internally a pointer, a pointer to an array doesn't actually get
// compiled as a pointer to a pointer. The only machine code difference between the
// following two functions is that print_array_by_value memcopies the array into
// it's stack before using it

print_array_by_value :: (arr: [3][3][3]i8, name: str) {
    x : usize = 0;
    while x < 3 {
        y : usize = 0;
        while y < 3 {
            z : usize = 0;
            while z < 3 {
                core.println(name, "[", x, "][", y, "][", z, "] = ", arr[x][y][z]);
                z = z + 1;
            }
            y = y + 1;
        }
        x = x + 1;
    }
}

print_array_by_ref :: (arr: ^[3][3][3]i8, name: str) {
    x : usize = 0;
    while x < 3 {
        y : usize = 0;
        while y < 3 {
            z : usize = 0;
            while z < 3 {
                core.println(name, "[", x, "][", y, "][", z, "] = ", arr[x][y][z]);
                z = z + 1;
            }
            y = y + 1;
        }
        x = x + 1;
    }
}
