
core :: #mod("core");

get_user_input :: () -> i32 {
    buffer := char.['\0', '\0', '\0', '\0', '\0'];

    core.libc.read(core.libc.stdin, (^mut u8).((mut rawptr).(^mut buffer)), 2);

    len := isize.(core.str_len(str.(buffer)));

    idx := 0;
    while idx < buffer.len {
        idx = idx + 1;
    }

    result := 0;
    idx := 0;

    `main_loop: while idx < buffer.len {
        ch := buffer[usize.(idx)];

        digit := if ch == '0' {
            0
        } else if ch == '1' {
            1
        } else if ch == '2' {
            2
        } else if ch == '3' {
            3
        } else if ch == '4' {
            4
        } else if ch == '5' {
            5
        } else if ch == '6' {
            6
        } else if ch == '7' {
            7
        } else if ch == '8' {
            8
        } else if ch == '9' {
            9
        } else {
            break `main_loop;
        };

        j : isize = 0;

        while j < len - 1 {
            digit = digit * 10;
            j = j + 1;
        }
        len = len - 1;

        result = result + digit;

        idx = idx + 1;
    }

    result
}
