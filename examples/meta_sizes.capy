core :: mod "core";

Person :: struct {
    name: string,
    age: i32,
};

main :: () {
    core.println("Reflection!");

    Foo :: struct {
        a: bool,
    };
    
    print_type_layout("i32             ", i32);
    print_type_layout("i64             ", i64);
    print_type_layout("u64             ", u64);
    print_type_layout("i8              ", i8);
    print_type_layout("u128            ", u128);
    print_type_layout("f32             ", f32);
    print_type_layout("void            ", void);
    print_type_layout("any             ", any);
    print_type_layout("string          ", string);
    print_type_layout("char            ", char);
    print_type_layout("type            ", type);
    print_type_layout("Person          ", Person);
    print_type_layout("Foo             ", Foo);
    print_type_layout("[6] Person      ", [6] Person);
    print_type_layout(" ^  Person      ", ^ Person);
    print_type_layout("distinct Person ", distinct Person);
    print_type_layout("distinct Person ", distinct Person);
    print_type_layout("()       -> void", () -> void);
    print_type_layout("(x: i32) -> f32 ", (x: i32) -> f32);

    core.print("\ni32 == i16 : ");
    println_bool(i32 == i16);

    core.print("i32 == u32 : ");
    println_bool(i32 == u32);

    core.print("i32 == i32 : ");
    println_bool(i32 == i32);

    core.print("Foo == Person : ");
    println_bool(Foo == Person);

    core.print("Person == Person : ");
    println_bool(i32 == i32);

    core.print("[5] Person == [6] Person : ");
    println_bool([5] Person == [6] Person);

    core.print("[5] Foo == [5] Person : ");
    println_bool([5] Foo == [6] Person);

    core.print("[6] Person == [6] Person : ");
    println_bool([6] Person == [6] Person);

    core.print("^Person == ^Foo : ");
    println_bool(^Person == ^Foo);

    core.print("^Person == ^Person : ");
    println_bool(^Person == ^Person);

    core.print("distinct Person == distinct Person : ");
    println_bool(distinct Person == distinct Person);

    x := distinct Person;
    core.print("x == x : ");
    println_bool(x == x);

    core.print("() -> void == (x: i32) -> f32 : ");
    println_bool(() -> void == (x: i32) -> f32);

    core.print("() -> void == () -> void : ");
    println_bool(() -> void == () -> void);

}

print_type_layout :: (name: string, ty: type) {
    printf("%s (0x%x) : size = %i, align = %i, stride = %i\n", name, ty, core.meta.size_of(ty), core.meta.align_of(ty), core.meta.stride_of(ty));
}

println_bool :: (b: bool) {
    if b {
        core.println("true");
    } else {
        core.println("false");
    }
}

printf :: (s: string, s2: string, ty: type, n1: usize, n2: usize, n3: usize) extern;
