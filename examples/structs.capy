
core :: mod "core";
libc :: core.libc;

Person :: struct {
    name: str,
    age: i32
};

Company :: struct {
    employees: [3]Person,
};

main :: () {
    some_guy := Person {
        name: "Terry",
        age: 48,
    };

    my_company := Company {
        employees: [3] Person {
            Person {
                name: "Bob",
                age: 32,
            },
            some_guy, // copied into the array
            Person {
                name: "Walter",
                age: 52,
            },
        },
    };

    some_guy.age = 1000;

    my_company.employees[0].age = 3;

    libc.puts("people:");
    idx := 0;
    while idx < 3 {
        print_person_by_ref(^my_company.employees[idx]);
        idx = idx + 1;
    }

    libc.puts("\nsome_guy:");
    print_person_by_value(some_guy);
}

// While a struct is internally a pointer, a pointer to a struct doesn't actually get
// compiled as a pointer to a pointer. The only machine code difference between the
// following two functions is that print_person_by_value memcopies the struct into
// it's stack before using it

print_person_by_value :: (p: Person) {
    core.print(p.name);
    core.print(" is ");
    core.print(p.age);
    core.println(" years old");
}

print_person_by_ref :: (p: ^Person) {
    core.print(p.name);
    core.print(" is ");
    core.print(p.age);
    core.println(" years old");
}
