
core :: mod "core";
meta :: core.meta;

imaginary :: distinct i32;

Foo :: struct {
    a: i32,
};

main :: () {
    Bar :: struct {
        text: str,
        flag: bool,
        array: [3] i16,
    };

    print_info(i32);
    print_info(u8);
    print_info(u128);
    print_info(isize);
    print_info(f32);
    print_info(f64);
    print_info([5] i32);
    print_info([1000][3]f64);
    print_info([]i32);
    print_info(^i32);
    print_info(^^^i128);
    print_info(distinct i32);
    print_info(distinct [2] distinct i8);
    print_info(Foo);
    print_info(Bar);
    print_info(core.Any);
    print_info(distinct Foo);

    core.print_any(core.Any { ty: u8, data: ^123 as ^u8 });
    core.println("");
    core.print_any(core.Any { ty: [6]i32, data: ^[6]i32 { 4, 8, 15, 16, 23, 42 } });
    core.println("");
    core.print_any(core.Any { ty: []i32, data: ^[]i32 { 1, 2, 3 } });
    core.println("");
    core.print_any(core.Any { ty: ^i32, data: ^^52 as ^^i32 });
    core.println("");

    i := core.Any { ty: imaginary, data: ^42 as ^imaginary };

    core.print_any(i);
    core.println("");
    core.print_any(core.Any { ty: Bar, data: ^Bar {
        text: "Hello",
        flag: false,
        array: [3] i16 { 1, 2, 3 },
    } });
    core.println("");
    core.print_any(core.Any { ty: core.Any, data: ^i });

};

print_info :: (ty: type) {
    print_info_with_args(ty, 0);
    core.println("");
}

print_info_with_args :: (ty: type, indent: i32) {
    print_indent :: (indent: i32) {
        idx := 0;
        while idx < indent {
            core.libc.putchar(' ');
            idx = idx + 1;
        }
    };

    if meta.is_int(ty) {
        print_indent(indent);
        core.println("INT");

        info := meta.get_int_info(ty);

        print_indent(indent);
        printf("bit_width = %i\n", info.bit_width);
        print_indent(indent);
        core.print("signed    = ");
        res := if info.signed {
            "true"
        } else {
            "false"
        };
        core.println(res);
    } else if meta.is_float(ty) {
        print_indent(indent);
        core.println("FLOAT");

        info := meta.get_float_info(ty);

        print_indent(indent);
        printf("bit_width = %i\n", info.bit_width);
    } else if meta.is_array(ty) {
        print_indent(indent);
        core.println("ARRAY");

        info := meta.get_array_info(ty);

        print_indent(indent);
        printf("len = %i\n", info.len as i32);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_slice(ty) {
        print_indent(indent);
        core.println("SLICE");

        info := meta.get_slice_info(ty);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_pointer(ty) {
        print_indent(indent);
        core.println("POINTER");

        info := meta.get_pointer_info(ty);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_distinct(ty) {
        print_indent(indent);
        core.println("DISTINCT");

        info := meta.get_distinct_info(ty);

        print_indent(indent);
        core.println("ty =");
        print_info_with_args(info.ty, indent + 1);
    } else if meta.is_struct(ty) {
        print_indent(indent);
        core.println("STRUCT");

        info := meta.get_struct_info(ty);

        print_indent(indent);
        core.println("members =");

        indent := indent + 1;

        idx := 0;
        while idx < info.members.len {
            member := info.members[idx];

            print_indent(indent);
            core.print("name = ");
            core.println(member.name);

            print_indent(indent);
            core.println("ty =");
            print_info_with_args(member.ty, indent + 1);

            print_indent(indent);
            printf("offset = %i\n", member.offset as i32);

            idx = idx + 1;
        }
    } else {
        print_indent(indent);
        name := if meta.is_bool(ty) {
            "BOOL"
        } else if meta.is_string(ty) {
            "STRING"
        } else if meta.is_char(ty) {
            "CHARACTER"
        } else if meta.is_meta_type(ty) {
            "META TYPE"
        } else if meta.is_any(ty) {
            "ANY"
        } else if meta.is_file(ty) {
            "FILE"
        } else if meta.is_function(ty) {
            "FUNCTION"
        } else if meta.is_void(ty) {
            "VOID"
        } else {
            core.println("\nokay you fricked up bud");
            core.libc.exit(1);

            "unreachable"
        };
        core.println(name);
    }
}

printf :: (text: str, num: i32) extern;
