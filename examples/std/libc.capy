
// in the future, you wouldn't call `malloc` directly, you'd use an Allocator abstraction
malloc :: (bytes: usize) -> ^mut any extern;
free :: (ptr: ^any) extern;
memcpy :: (dst: ^any, src: ^any, len: usize) extern;

puts :: (s: string) extern;
// `char` is the same as `u8`
putchar :: (c: char) extern;

// fopen actually returns a pointer to a `FILE` struct, but
// we just treat this as a usize and everything works fine
fopen :: (filename: string, mode: string) -> usize extern;
fclose :: (fp: usize) -> i32 extern;

fputc :: (c: i8, fp: usize) -> i32 extern;
fputs :: (s: string, fp: usize) -> i32 extern;

fgetc :: (fp: usize) -> u8 extern;
fgets :: (buf: ^char, n: i32, fp: usize) -> string extern;
