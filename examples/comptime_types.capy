
core :: mod "core";
ptr :: core.ptr;
libc :: core.libc;
meta :: core.meta;

My_Type :: comptime {
    libc.puts("This is getting JIT'ed!");

    Field_Ty :: comptime {
        libc.puts("computing field type");

        input := get_user_input();

        if input == 32 {
            i32
        } else if input == 64 {
            i64
        } else {
            u8
        }
    };

    struct {
        a: Field_Ty,
    }
};

main :: () {
    core.print("size: ");
    core.println(meta.size_of(My_Type));

    foo : My_Type = My_Type {
        a: 42,
    };
    
    core.println(foo);
}

get_user_input :: () -> i32 {
    buffer := [5]char{'\0', '\0', '\0', '\0', '\0'};

    _read(0, ^mut buffer, 2);

    len := core.str_len(buffer as str) as isize;

    idx := 0;
    while idx < buffer.len {
        idx = idx + 1;
    }

    result := 0;
    idx := 0;

    `main_loop while idx < buffer.len {
        ch := buffer[idx as usize];

        digit := if ch == '0' {
            0
        } else if ch == '1' {
            1
        } else if ch == '2' {
            2
        } else if ch == '3' {
            3
        } else if ch == '4' {
            4
        } else if ch == '5' {
            5
        } else if ch == '6' {
            6
        } else if ch == '7' {
            7
        } else if ch == '8' {
            8
        } else if ch == '9' {
            9
        } else {
            break main_loop`;
        };

        j : isize = 0;

        while j < len - 1 {
            digit = digit * 10;
            j = j + 1;
        }
        len = len - 1;

        result = result + digit;

        idx = idx + 1;
    }

    result
}

_read :: (fd: usize, buf: ^mut any, count: i32) -> i32 extern;
