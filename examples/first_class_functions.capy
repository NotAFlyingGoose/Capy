
core :: #mod("core");

add :: (x: i32, y: i32) -> i32 {
    x + y
}

sub :: (x: i32, y: i32) -> i32 {
    x - y
}

mul :: (x: i32, y: i32) -> i32 {
    x * y
}

div :: (x: i32, y: i32) -> i32 {
    x / y
}

apply :: (fn: (x: i32, y: i32) -> i32, x: i32, y: i32) -> i32 {
    fn(x, y)
}

main :: () -> i32 {
    core.println("apply add to  1 and 2 ... ", apply(add, 1, 2));
    core.println("apply sub to  5 and 3 ... ", apply(sub, 5, 3));
    core.println("apply mul to  3 and 2 ... ", apply(mul, 3, 2));
    core.println("apply div to 10 and 2 ... ", apply(div, 10, 2));

    pow :: (x: i32, y: i32) -> i32 {
        res := 1;

        i := 0;
        while i < y {
            res = res * x;

            i = i + 1;
        }

        res
    };

    core.println("apply pow to  2 and 3 ... ", apply(pow, 2, 3));

    pow(5, 6);

    (val: i32) -> i32 {
        val * 2
    }(25)
}
