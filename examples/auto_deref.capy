core :: mod "core";
io :: import "io.capy";

Foo :: struct {
    a: i32,
    b: i32,
};

main :: () {
    core.println("struct auto deref:");

    my_foo := Foo.{
        a = 4,
        b = 8,
    };

    io.label("my_foo.b   ", my_foo.b);

    ptr := ^^^^my_foo;

    io.label("ptr^^^^.b  ", ptr^^^^.b);
    io.label("ptr^^^.b   ", ptr^^^.b);
    io.label("ptr^^.b    ", ptr^^.b);
    io.label("ptr^.b     ", ptr^.b);
    io.label("ptr.b      ", ptr.b);

    core.println("  give:");

    give_struct(ptr^^);

    core.println("\narray auto deref:");

    my_array := i32.[4, 8, 15, 16, 23, 42];

    ptr := ^my_array;

    idx : usize = 0;
    while idx < 3 {
        io.label_two("ptr^[", idx, "] ", ptr^[idx]);
        io.label_two("ptr[", idx, "]  ", ptr[idx]);
        idx = idx + 1;
    }

    ptr_ptr := ^^my_array;

    while idx < 6 {
        io.label_two("ptr_ptr^^[", idx, "] ", ptr_ptr^^[idx]);
        io.label_two("ptr_ptr^[", idx, "]  ", ptr_ptr^[idx]);
        io.label_two("ptr_ptr[", idx, "]   ", ptr_ptr[idx]);
        idx = idx + 1;
    }

    core.println("  give:");

    give_array(ptr_ptr);
}

give_struct :: (ptr: ^^Foo) {
    io.label("ptr^^.b    ", ptr^^.b);
    io.label("ptr^.b     ", ptr^.b);
    io.label("ptr.b      ", ptr.b);
}

give_array :: (ptr_ptr: ^^[6] i32) {
    idx : usize = 0;
    while idx < 6 {
        io.label_two("ptr_ptr^^[", idx, "] ", ptr_ptr^^[idx]);
        io.label_two("ptr_ptr^[", idx, "]  ", ptr_ptr^[idx]);
        io.label_two("ptr_ptr[", idx, "]   ", ptr_ptr[idx]);
        idx = idx + 1;
    }
}
